{"version":3,"sources":["../src/hercule.js"],"names":["resolveHttpUrl","resolveLocalUrl","resolveString","TranscludeStream","transcludeString","transcludeFile","source","options","outputFile","get","sourceMap","transclude","indenter","trim","sourcemap","stringify","on","end","generatedSourceMap","pipe","transcluder","bubbleErrors","emit","args","input","shift","cb","pop","srcmap","write","then","output","catch","err","bufferedData","inputStream","createReadStream","encoding"],"mappings":"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","file":"hercule.js","sourcesContent":["import fs from 'fs';\nimport _ from 'lodash';\nimport duplexer from 'duplexer3';\nimport get from 'through2-get';\nimport getStream from 'get-stream';\n\nimport Transclude from './transclude';\nimport Indent from './indent';\nimport Trim from './trim';\nimport Sourcemap from './sourcemap';\n\nexport { resolveHttpUrl, resolveLocalUrl, resolveString } from './resolver';\n\nexport function TranscludeStream(source = 'input', options) {\n  const outputFile = _.get(options, 'outputFile');\n  let sourceMap;\n\n  const transclude = new Transclude(source, options);\n  const indenter = new Indent();\n  const trim = new Trim();\n  const sourcemap = new Sourcemap(outputFile);\n  const stringify = get('content');\n\n  transclude.on('error', () => transclude.end());\n  sourcemap.on('sourcemap', generatedSourceMap => (sourceMap = generatedSourceMap));\n\n  transclude.pipe(trim).pipe(indenter).pipe(sourcemap).pipe(stringify);\n\n  const transcluder = duplexer({ bubbleErrors: false }, transclude, stringify);\n  transcluder.on('end', () => transcluder.emit('sourcemap', sourceMap));\n\n  return transcluder;\n}\n\nexport function transcludeString(...args) {\n  const input = args.shift();\n  const cb = args.pop();\n  const [options = {}] = args;\n  const source = _.get(options, 'source') || 'string';\n\n  const transclude = new TranscludeStream(source, options);\n  let sourceMap;\n\n  transclude.on('sourcemap', srcmap => (sourceMap = srcmap));\n  transclude.write(input, 'utf8');\n  transclude.end();\n\n  getStream(transclude)\n    .then(output => cb(null, output, sourceMap))\n    .catch(err => cb(err, err.bufferedData, sourceMap));\n}\n\n\nexport function transcludeFile(...args) {\n  const input = args.shift();\n  const cb = args.pop();\n  const [options = {}] = args;\n\n  const transclude = new TranscludeStream(input, options);\n  const inputStream = fs.createReadStream(input, { encoding: 'utf8' });\n  let sourceMap;\n\n  transclude.on('sourcemap', srcmap => (sourceMap = srcmap));\n  inputStream.on('error', err => cb(err));\n  inputStream.pipe(transclude);\n\n  getStream(transclude)\n    .then(output => cb(null, output, sourceMap))\n    .catch(err => cb(err, err.bufferedData, sourceMap));\n}\n"]}