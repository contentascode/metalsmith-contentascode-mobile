{"version":3,"sources":["../src/indent.js"],"names":["Indent","NEWLINE","inputBuffer","transform","chunk","encoding","cb","content","push","length","indent","preceededNewLine","slice","beginsNewLine","replace","shift","flush","obj"],"mappings":";;;;;kBAGwBA,M;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,MAAT,GAAkB;AAC/B,MAAMC,UAAU,IAAhB;AACA,MAAMC,cAAc,EAApB;;AAEA,WAASC,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,EAApC,EAAwC;AACtC,QAAIF,MAAMG,OAAV,EAAmBL,YAAYM,IAAZ,CAAiBJ,KAAjB;;AAEnB;AACA,WAAOF,YAAYO,MAAZ,GAAqB,CAA5B,EAA+B;AAC7B,UAAMC,SAASR,YAAY,CAAZ,EAAeQ,MAA9B;AACA,UAAIH,UAAUL,YAAY,CAAZ,EAAeK,OAA7B;AACA,UAAMI,mBAAmBT,YAAY,CAAZ,EAAeK,OAAf,CAAuBK,KAAvB,CAA6B,CAAC,CAA9B,MAAqCX,OAA9D;AACA,UAAMY,gBAAgBX,YAAY,CAAZ,EAAeK,OAAf,CAAuBK,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,MAAuCX,OAA7D;;AAEA,UAAIS,MAAJ,EAAY;AACV,YAAIC,oBAAoB,CAACE,aAAzB,EAAwCN,UAAUG,SAASH,OAAnB;;AAExCA,kBAAU,iBAAEO,OAAF,CAAUP,OAAV,EAAmB,aAAnB,SAAuCG,MAAvC,CAAV;AACAR,oBAAY,CAAZ,EAAeK,OAAf,GAAyBA,OAAzB;AACD;;AAED,WAAKC,IAAL,CAAUN,YAAYa,KAAZ,EAAV;AACD;;AAED,WAAOT,IAAP;AACD;;AAED,WAASU,KAAT,CAAeV,EAAf,EAAmB;AACjB;AACA,QAAIJ,YAAYO,MAAZ,GAAqB,CAAzB,EAA4B,KAAKD,IAAL,CAAUN,YAAYa,KAAZ,EAAV;AAC5B,SAAKP,IAAL,CAAU,IAAV;AACA,WAAOF,IAAP;AACD;;AAED,SAAO,kBAASW,GAAT,CAAad,SAAb,EAAwBa,KAAxB,CAAP;AACD","file":"indent.js","sourcesContent":["import through2 from 'through2';\nimport _ from 'lodash';\n\nexport default function Indent() {\n  const NEWLINE = '\\n';\n  const inputBuffer = [];\n\n  function transform(chunk, encoding, cb) {\n    if (chunk.content) inputBuffer.push(chunk);\n\n    // The input buffer shouldn't have more than two items in it at a time\n    while (inputBuffer.length > 1) {\n      const indent = inputBuffer[1].indent;\n      let content = inputBuffer[1].content;\n      const preceededNewLine = inputBuffer[0].content.slice(-1) === NEWLINE;\n      const beginsNewLine = inputBuffer[1].content.slice(0, 1) === NEWLINE;\n\n      if (indent) {\n        if (preceededNewLine && !beginsNewLine) content = indent + content;\n\n        content = _.replace(content, /\\n(?!\\s|$)/g, `\\n${indent}`);\n        inputBuffer[1].content = content;\n      }\n\n      this.push(inputBuffer.shift());\n    }\n\n    return cb();\n  }\n\n  function flush(cb) {\n    // Empty internal buffer and signal the end of the output stream.\n    if (inputBuffer.length > 0) this.push(inputBuffer.shift());\n    this.push(null);\n    return cb();\n  }\n\n  return through2.obj(transform, flush);\n}\n"]}